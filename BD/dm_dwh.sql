CREATE SCHEMA "DWH";
CREATE SCHEMA "SA";
CREATE SCHEMA "PART";

-------------------------------------------------
-------------------DM_ANIO----------------------
-------------------------------------------------

CREATE TABLE "DWH"."DM_ANIO"
(
  ANIO_ID INT NOT NULL,
  ANIO_DESC VARCHAR(30),
  CONSTRAINT PK_DM_ANIO PRIMARY KEY (ANIO_ID) 
);
insert into "DWH"."DM_ANIO" values (0, 'INDEFINIDO');
--------------------------------------------------
-----------------DM_MES--------------------------
--------------------------------------------------

CREATE TABLE "DWH"."DM_MES"
(
  MES_ID INT NOT NULL,
  ANIO_ID INT NOT NULL,
  MES_DESC VARCHAR(30),
  CONSTRAINT PK_DM_MES PRIMARY KEY (MES_ID), 
  CONSTRAINT FK_DM_MES_DM_ANIO FOREIGN KEY (ANIO_ID)
  REFERENCES "DWH"."DM_ANIO" (ANIO_ID) 
  ON UPDATE CASCADE
  ON DELETE CASCADE  
);
insert into "DWH"."DM_MES" values (0, 0, 'INDEFINIDO');
--------------------------------------------------
----------------DM_ACTIVIDAD----------------------
--------------------------------------------------
CREATE TABLE "DWH"."DM_ACTIVIDAD"
(
	ID_ACT INT NOT NULL GENERATED BY DEFAULT AS IDENTITY
	,CODE_ACT VARCHAR(6)
	,NOMBRE_ACT VARCHAR(250)
	,CONSTRAINT PK_DM_ACTIVIDAD PRIMARY KEY (ID_ACT)
);

insert into "DWH"."DM_ACTIVIDAD" values (0, 'INDEF', 'INDEFINIDO');
--------------------------------------------------
-------------DM_ESTABLECIMIENTO-------------------
--------------------------------------------------
CREATE TABLE "DWH"."DM_ESTABLECIMIENTO"
(
	ID_ESTAB INT NOT NULL GENERATED BY DEFAULT AS IDENTITY
	,CODE_ESTAB VARCHAR(10) NOT NULL
	,NOM_ESTAB VARCHAR(250)
	,RAZ_SOCIAL VARCHAR(250)
	,FECHA_ALTA INT
	,TIPOUNIECO VARCHAR(10)
	,ID_ACT INT NOT NULL
	,CONSTRAINT PK_DM_ESTABLECIMIENTO PRIMARY KEY (ID_ESTAB)
	,CONSTRAINT FK_DM_ESTABLECIMIENTO_DM_ACTIVIDAD FOREIGN KEY (ID_ACT)
  REFERENCES "DWH"."DM_ACTIVIDAD" (ID_ACT)
    ,CONSTRAINT FK_DM_ESTABLECIMIENTO_DM_MES FOREIGN KEY (FECHA_ALTA)
  REFERENCES "DWH"."DM_MES" (MES_ID)  
);

insert into "DWH"."DM_ESTABLECIMIENTO" values (0, 'INDEFINIDO', 'INDEFINIDO', 'INDEFINIDO', 0, 'INDEFINIDO', 0);

--------------------------------------------------
-------------DM_ENTIDAD-------------------
--------------------------------------------------
CREATE TABLE "DWH"."DM_ENTIDAD"
(
	ID_ENTIDAD INT NOT NULL GENERATED BY DEFAULT AS IDENTITY
	,CODE_ENTIDAD VARCHAR(100) NOT NULL
	,DESC_ENTIDAD VARCHAR(100)
	,CONSTRAINT PK_DM_ENTIDAD PRIMARY KEY (ID_ENTIDAD)
);

insert into "DWH"."DM_ENTIDAD" values (0, 'INDEFINIDO', 'INDEFINIDO');

--------------------------------------------------
-------------DM_MUNICIPIO-------------------
--------------------------------------------------
CREATE TABLE "DWH"."DM_MUNICIPIO"
(
	ID_MUNICIPIO INT NOT NULL GENERATED BY DEFAULT AS IDENTITY
	,CODE_MUNICIPIO VARCHAR(100) NOT NULL
	,DESC_MUNICIPIO VARCHAR(100)
	,ID_ENTIDAD INT NOT NULL
	,CONSTRAINT PK_DM_MUNICIPIO PRIMARY KEY (ID_MUNICIPIO)
	,CONSTRAINT FK_DM_MUNICIPIO_DM_ENTIDAD FOREIGN KEY (ID_ENTIDAD)
  REFERENCES "DWH"."DM_ENTIDAD" (ID_ENTIDAD)
);

insert into "DWH"."DM_MUNICIPIO" values (0, 'INDEFINIDO', 'INDEFINIDO', 0);

--------------------------------------------------
-------------DM_LOCALIDAD-------------------
--------------------------------------------------
CREATE TABLE "DWH"."DM_LOCALIDAD"
(
	ID_LOCALIDAD INT NOT NULL GENERATED BY DEFAULT AS IDENTITY
	,CODE_LOCALIDAD VARCHAR(100) NOT NULL
	,DESC_LOCALIDAD VARCHAR(100)
	,ID_MUNICIPIO INT NOT NULL
	,CONSTRAINT PK_DM_LOCALIDAD PRIMARY KEY (ID_LOCALIDAD)
	,CONSTRAINT FK_DM_LOCALIDAD_DM_MUNICIPIO FOREIGN KEY (ID_MUNICIPIO)
  REFERENCES "DWH"."DM_MUNICIPIO" (ID_MUNICIPIO)
);

insert into "DWH"."DM_LOCALIDAD" values (0, 'INDEFINIDO', 'INDEFINIDO', 0);

--------------------------------------------------
-------------DM_ZONA_GEOGRAFICA-------------------
--------------------------------------------------
CREATE TABLE "DWH"."DM_ZONA_GEOGRAFICA"
(
    ID_ZONA_GEOGRAFICA INT NOT NULL GENERATED BY DEFAULT AS identity
    ,CODE_ZONA_GEOGRAFICA VARCHAR(10)
    ,LATITUD NUMERIC(21, 8)
    ,LONGITUD NUMERIC(21, 8)
    ,ID_LOCALIDAD INT NOT NULL
    ,CONSTRAINT PK_DM_ZONA_GEOGRAFICA PRIMARY KEY (ID_ZONA_GEOGRAFICA)
    ,CONSTRAINT FK_DM_MUNICIPIO_DM_ZONA_GEOGRAFICA FOREIGN KEY (ID_LOCALIDAD)
  REFERENCES "DWH"."DM_LOCALIDAD" (ID_LOCALIDAD)
);

insert into "DWH"."DM_ZONA_GEOGRAFICA" values (0, 'INDEFINIDO', null, 
null, 0);

--------------------------------------------------
-------------FACT_ESTADISTICA-------------------
--------------------------------------------------

-----------------------------------------------------------------
-------------------------SE CREA LA TABLA PADRE------------------
-----------------------------------------------------------------
CREATE TABLE "DWH"."FACT_ESTADISTICA"
(
	ID_ANIO INT NOT NULL
	,ID_ZONA_GEOGRAFICA INT NOT NULL
	,ID_EST INT NOT NULL
	,MIN_PERSONA INT 
	,MAX_PERSONA INT
)PARTITION BY RANGE (ID_ZONA_GEOGRAFICA);

-------------------------------------------------
--------------------SE CREAN TABLAS HIJAS--------
-------------------------------------------------
CREATE TABLE "PART"."ESTADISTICA_01" PARTITION OF "DWH"."FACT_ESTADISTICA" 
    FOR VALUES FROM (1) TO (50000); -- se delimita el rango de las particiones
CREATE TABLE "PART"."ESTADISTICA_02" PARTITION OF "DWH"."FACT_ESTADISTICA" 
    FOR VALUES FROM (50000) TO (100000);
CREATE TABLE "PART"."ESTADISTICA_03" PARTITION OF "DWH"."FACT_ESTADISTICA" 
    FOR VALUES FROM (100000) TO (150000); 
CREATE TABLE "PART"."ESTADISTICA_04" PARTITION OF "DWH"."FACT_ESTADISTICA" 
    FOR VALUES FROM (150000) TO (200000);
CREATE TABLE "PART"."ESTADISTICA_05" PARTITION OF "DWH"."FACT_ESTADISTICA" 
    FOR VALUES FROM (200000) TO (250000);
CREATE TABLE "PART"."ESTADISTICA_06" PARTITION OF "DWH"."FACT_ESTADISTICA" 
    FOR VALUES FROM (250000) TO (300000);
CREATE TABLE "PART"."ESTADISTICA_07" PARTITION OF "DWH"."FACT_ESTADISTICA" 
    FOR VALUES FROM (300000) TO (350000); 
CREATE TABLE "PART"."ESTADISTICA_08" PARTITION OF "DWH"."FACT_ESTADISTICA" 
    FOR VALUES FROM (350000) TO (400000);
CREATE TABLE "PART"."ESTADISTICA_09" PARTITION OF "DWH"."FACT_ESTADISTICA" 
    FOR VALUES FROM (400000) TO (450000); 
CREATE TABLE "PART"."ESTADISTICA_10" PARTITION OF "DWH"."FACT_ESTADISTICA" 
    FOR VALUES FROM (450000) TO (500000);
CREATE TABLE "PART"."ESTADISTICA_11" PARTITION OF "DWH"."FACT_ESTADISTICA" 
    FOR VALUES FROM (500000) TO (550000); 
CREATE TABLE "PART"."ESTADISTICA_12" PARTITION OF "DWH"."FACT_ESTADISTICA" 
    FOR VALUES FROM (550000) TO (600000);
CREATE TABLE "PART"."ESTADISTICA_13" PARTITION OF "DWH"."FACT_ESTADISTICA" 
    FOR VALUES FROM (600000) TO (650000);
CREATE TABLE "PART"."ESTADISTICA_14" PARTITION OF "DWH"."FACT_ESTADISTICA" 
    FOR VALUES FROM (650000) TO (700000);
CREATE TABLE "PART"."ESTADISTICA_15" PARTITION OF "DWH"."FACT_ESTADISTICA" 
    FOR VALUES FROM (700000) TO (750000);
CREATE TABLE "PART"."ESTADISTICA_16" PARTITION OF "DWH"."FACT_ESTADISTICA" 
    FOR VALUES FROM (750000) TO (800000);
CREATE TABLE "PART"."ESTADISTICA_17" PARTITION OF "DWH"."FACT_ESTADISTICA" 
    FOR VALUES FROM (800000) TO (850000); 
CREATE TABLE "PART"."ESTADISTICA_18" PARTITION OF "DWH"."FACT_ESTADISTICA" 
    FOR VALUES FROM (850000) TO (900000);
CREATE TABLE "PART"."ESTADISTICA_19" PARTITION OF "DWH"."FACT_ESTADISTICA" 
    FOR VALUES FROM (900000) TO (950000); 
CREATE TABLE "PART"."ESTADISTICA_20" PARTITION OF "DWH"."FACT_ESTADISTICA" 
    FOR VALUES FROM (950000) TO (1000000);
CREATE TABLE "PART"."ESTADISTICA_21" PARTITION OF "DWH"."FACT_ESTADISTICA" 
    FOR VALUES FROM (1000000) TO (1050000);
CREATE TABLE "PART"."ESTADISTICA_22" PARTITION OF "DWH"."FACT_ESTADISTICA" 
    FOR VALUES FROM (1050000) TO (1100000);
CREATE TABLE "PART"."ESTADISTICA_23" PARTITION OF "DWH"."FACT_ESTADISTICA" 
    FOR VALUES FROM (1100000) TO (1150000); 
CREATE TABLE "PART"."ESTADISTICA_24" PARTITION OF "DWH"."FACT_ESTADISTICA" 
    FOR VALUES FROM (1150000) TO (1200000);
CREATE TABLE "PART"."ESTADISTICA_25" PARTITION OF "DWH"."FACT_ESTADISTICA" 
    FOR VALUES FROM (1200000) TO (1250000);
CREATE TABLE "PART"."ESTADISTICA_26" PARTITION OF "DWH"."FACT_ESTADISTICA" 
    FOR VALUES FROM (1250000) TO (1300000);
CREATE TABLE "PART"."ESTADISTICA_27" PARTITION OF "DWH"."FACT_ESTADISTICA" 
    FOR VALUES FROM (1300000) TO (1350000); 
CREATE TABLE "PART"."ESTADISTICA_28" PARTITION OF "DWH"."FACT_ESTADISTICA" 
    FOR VALUES FROM (1350000) TO (1400000);
CREATE TABLE "PART"."ESTADISTICA_29" PARTITION OF "DWH"."FACT_ESTADISTICA" 
    FOR VALUES FROM (1400000) TO (1450000); 
CREATE TABLE "PART"."ESTADISTICA_30" PARTITION OF "DWH"."FACT_ESTADISTICA" 
    FOR VALUES FROM (1450000) TO (1500000);


-----------------------------------------------------------------
-------------------------SE CREA TABLA TMP tiempo----------------
-----------------------------------------------------------------
CREATE TABLE "SA".TMP_TIEMPO
(
	DIA_ID INT NOT NULL,
	DIA_DESC date,
	ANIO_ID INT NOT NULL,
  	ANIO_DESC VARCHAR(30),
	MES_ID INT NOT NULL,
	MES_DESC VARCHAR(30),
	DIA_DESC2 VARCHAR(30),
	DIA_SEMANA VARCHAR(30), 
	TRIMESTRE_ID int,
	TRIMESTRE_DESC VARCHAR(30),
	SEMESTRE_ID INT,
	SEMESTRE_DESC VARCHAR(30)
  
);


--<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>--
--<<<<<<<<<<<<<<<<<<<Procedimiento llenado tiempo>>>>>>>>>>>>>>>>>>>>>>>--
--<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>--
CREATE OR REPLACE FUNCTION "SA".pro_dim_tiempo(anio integer)
 RETURNS date
 LANGUAGE plpgsql
AS $function$
     DECLARE 
	    Fecha_ini  varchar;
        Fecha_fin varchar;
		
	 BEGIN
	 
	 anio:=cast (anio as varchar);
     Fecha_ini:=anio||'0101' ;
     Fecha_fin:=anio||'1231';
	 Fecha_ini:=cast(Fecha_ini as date);
     Fecha_fin:=cast(Fecha_fin as date);


CREATE TEMPORARY TABLE fecha(fecha date) ON COMMIT DELETE ROWS;

while Fecha_ini <= Fecha_fin
  Loop    
     insert into fecha(fecha) values(cast(Fecha_ini as date));
     Fecha_ini:=cast(Fecha_ini as date)+1;

   End Loop;

DELETE FROM "SA".TMP_TIEMPO
   WHERE ANIO_ID=anio;

insert into "SA".TMP_TIEMPO 
select 
       cast(to_char( fecha,'yyyymmdd') as int) DIA_ID,
       fecha DIA_DESC,
       cast(to_char( fecha,'yyyy') as int) ANIO_ID,
       'AÑO '||to_char( fecha,'yyyy') ANIO_DESC,
      cast( to_char( fecha,'YYYYMM') as int) MES_ID,
       to_char( fecha,'TMMonth')||' '||to_char(fecha,'YYYY') MES_DESC, -- el prefijo TM muestra los datos en el lenguage configurado en lc_time de lo contrario muestra el Default
       to_char( fecha,'dd')||' de '||to_char( fecha,'TMMonth')||' '||to_char( fecha,'yyyy') DIA_DESC2,
       to_char( fecha,'TMDay') DIA_SEMANA,
      cast( to_char( fecha,'yyyy')||'0'||to_char( fecha,'q') as int) TRIMESTRE_ID,
       '0'||to_char( fecha,'q')||' TRIMESTRE '||to_char( fecha,'yyyy') TRIMESTRE_DESC,
      cast( to_char( fecha,'yyyy')||case when cast(to_char( fecha,'q')as INT)<=2 then '01' else '02' end as int) SEMESTRE_ID,
       (case when cast(to_char( fecha,'q')as INT)<=2 then '01' else '02' end)||' SEMESTRE '||to_char( fecha,'yyyy') SEMESTRE_DESC
       
from FECHA ;


------------------------------------------
---------Inserts DM_ANIO-----------------
------------------------------------------

DELETE FROM "DWH"."DM_ANIO" 
    WHERE ANIO_ID=ANIO;

INSERT INTO "DWH"."DM_ANIO" (ANIO_ID
                              ,ANIO_DESC)
	   SELECT DISTINCT A.ANIO_ID, A.ANIO_DESC
	    FROM  "SA".TMP_TIEMPO A
	WHERE A.ANIO_ID=anio;


------------------------------------------
---------Inserts DM_MES-------------
------------------------------------------

DELETE FROM "DWH"."DM_MES" 
    WHERE ANIO_ID=anio;

INSERT INTO "DWH"."DM_MES" (MES_ID
                               ,ANIO_ID
                              ,MES_DESC)
	   SELECT DISTINCT A.MES_ID,A.ANIO_ID,A.MES_DESC
	    FROM  "SA".TMP_TIEMPO A
	WHERE A.ANIO_ID=anio;

drop table fecha;

 return Fecha_ini; 	 
END;
$function$
;


--<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>--
--<<<<<<<<<<<<<<<<<Procedimiento llenado zona geografica>>>>>>>>>>>>>>>>--
--<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>--

CREATE OR REPLACE FUNCTION "SA".sp_zona()
 RETURNS character
 LANGUAGE plpgsql
AS $function$   
  BEGIN

---------------------------------------------------------------------------------------------
-----------------------------Se crea tabla temporal TMP_FACT_VENTAS---------------------
---------------------------------------------------------------------------------------------
CREATE TEMPORARY table TMP_ZONA AS 
(

  select cast(tzg.id_zona_geografica as varchar) id_zona_geografica, latitud, longitud, dl.id_localidad id_localidad from "SA".tmp_zona_geografica tzg 
  join "DWH"."DM_LOCALIDAD" dl on (cast(tzg.cve_loc as varchar) = dl.code_localidad and dl.desc_localidad = upper(tzg.localidad))
    join "DWH"."DM_MUNICIPIO" dm on dm.id_municipio = dl.id_municipio and dm.code_municipio = cast(tzg.cve_mun as varchar)
      join "DWH"."DM_ENTIDAD" de on dm.id_entidad = de.id_entidad and de.code_entidad  = cast(tzg.cve_ent as varchar)
);  
     
------------------------------------------------------
----------------dwh.fact_ventas------------------
------------------------------------------------------
INSERT INTO "DWH"."DM_ZONA_GEOGRAFICA"
  (CODE_ZONA_GEOGRAFICA, 
  LATITUD,
   LONGITUD,
   ID_LOCALIDAD
   )
------TMP_FACT_VENT 
select id_zona_geografica,
       latitud,
     longitud,
     id_localidad
from TMP_ZONA;
      
    drop table TMP_ZONA;--elimina la temporal TMP_ZONA
return 'ok';   
END;
$function$
;


--<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>--
--<<<<<<<<<<<<<<<<<Procedimiento llenado fact estadistica>>>>>>>>>>>>>>>>--
--<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>--
CREATE OR REPLACE FUNCTION "SA".sp_fact_estadistica(fecha integer)
 RETURNS character
 LANGUAGE plpgsql
AS $function$   
  BEGIN

---------------------------------------------------------------------------------------------
-----------------------------Se crea tabla temporal TMP_FACT_ESTADISTICA---------------------
---------------------------------------------------------------------------------------------
CREATE TEMPORARY table TMP_FACT_ESTADISTICA AS 
(

  SELECT de.id_estab , ID_EST,
     dzg.id_zona_geografica, ID_ZONA,
     CAST(NULL AS INT) ID_FECHA,
     CAST(SUBSTRING(per_ocu, '[0-9]{1,3}') AS INT) MIN_PERSONA,
     CAST(SUBSTRING( SUBSTRING(per_ocu, 5, 5), '[0-9]{1,3}')AS INT) MAX_PERSONA
    FROM "SA".tmp_estaditica e
      JOIN "DWH"."DM_ZONA_GEOGRAFICA" dzg 
        ON dzg.code_zona_geografica = CAST(e.id_zona AS VARCHAR)
      JOIN "DWH"."DM_ESTABLECIMIENTO" de 
        ON de.code_estab = CAST(e.id_est  AS VARCHAR) ORDER BY 1
);  

----------------------------------------------------------------------------------
---------------------SE ACTUALIZA ID_FECHA-----------------------------------
----------------------------------------------------------------------------------
UPDATE TMP_FACT_ESTADISTICA
     SET id_fecha=fecha;
  
     
------------------------------------------------------
----------------DWH.FACT_ESTADISTICA------------------
------------------------------------------------------
INSERT INTO "DWH"."FACT_ESTADISTICA"
  (ID_EST, 
   ID_ZONA_GEOGRAFICA,
   ID_ANIO,
   MIN_PERSONA,
   MAX_PERSONA
   )
------TMP_FACT_VENT 
SELECT ID_ESTAB, 
   ID_ZONA_GEOGRAFICA,
   ID_FECHA,
   MIN_PERSONA,
   MAX_PERSONA
FROM TMP_FACT_ESTADISTICA;
      
    DROP TABLE TMP_FACT_ESTADISTICA;--elimina la temporal TMP_FACT_ESTADISTICA
RETURN 'ok';   
END;
$function$
;

--<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>--
--<<<<<<<<<<<<<<<<Procedimiento llenado dm establecimiento>>>>>>>>>>>>>>>--
--<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>--
CREATE OR REPLACE FUNCTION "SA".sp_dm_establecimiento()
 RETURNS character
 LANGUAGE plpgsql
AS $function$   
  BEGIN

---------------------------------------------------------------------------------------------
-----------------------------Se crea tabla temporal TMP_ESTABLECIMIENTO----------------------
---------------------------------------------------------------------------------------------
CREATE TEMPORARY table TMP_ESTABLECIMIENTO AS 
(
  SELECT CAST(id_est as VARCHAR) CODE_ESTAB
    ,NOM_ESTAB
    ,RAZ_SOCIAL
    ,CAST(SUBSTRING(fecha_alta, '[0-9]{1,4}') || SUBSTRING(SUBSTRING(fecha_alta, 5, 5), '[0-9]{1,3}')AS INT) FECHA_ALTA
    ,TIPOUNIECO
    ,ID_ACT
    FROM "SA".tmp_establecimiento e
      JOIN "DWH"."DM_ACTIVIDAD" a
        ON a.CODE_ACT = CAST(e.codigo_act AS VARCHAR)
);  

----------------------------------------------------------------------------------
---------------------SE ACTUALIZA RAZ_SOCIAL ID_ACT-------------------------------
----------------------------------------------------------------------------------
UPDATE TMP_ESTABLECIMIENTO
     SET RAZ_SOCIAL='INDEFINIDO' WHERE RAZ_SOCIAL IS NULL;
UPDATE TMP_ESTABLECIMIENTO
     SET ID_ACT=0 WHERE ID_ACT IS NULL;
  
     
------------------------------------------------------
----------------DWH.ESTABLECIMIENTO------------------
------------------------------------------------------
INSERT INTO "DWH"."DM_ESTABLECIMIENTO"
  (CODE_ESTAB
    ,NOM_ESTAB
    ,RAZ_SOCIAL
    ,FECHA_ALTA
    ,TIPOUNIECO
    ,ID_ACT
   )
------TMP_ESTABLECIMIENTO 
SELECT CODE_ESTAB
    ,NOM_ESTAB
    ,RAZ_SOCIAL
    ,FECHA_ALTA
    ,TIPOUNIECO
    ,ID_ACT
FROM TMP_ESTABLECIMIENTO;
      
    DROP TABLE TMP_ESTABLECIMIENTO;--elimina la temporal TMP_ESTABLECIMIENTO
RETURN 'ok';   
END;
$function$
;


--<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>--
--<<<<<<<<<<<<<<<<<Procedimiento llenado tmp principal>>>>>>>>>>>>>>>>>>>--
--<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>--
CREATE OR REPLACE FUNCTION "SA".sp_tmp_union()
 RETURNS character
 LANGUAGE plpgsql
AS $function$   
  BEGIN

   
------------------------------------------------------
----------------SA.ESTABLECIMIENTO------------------
------------------------------------------------------
INSERT INTO "SA".tmp_establecimiento

------TMP_ESTABLECIMIENTO 
SELECT *
FROM "SA".tmp_establecimiento_1
    UNION
    SELECT *
    FROM "SA".tmp_establecimiento_2
        UNION
        SELECT *
        FROM "SA".tmp_establecimiento_3
            UNION
            SELECT *
            FROM "SA".tmp_establecimiento_4
                UNION
                SELECT *
                FROM "SA".tmp_establecimiento_5

;

------------------------------------------------------
-------------------SA.ESTADITICA----------------------
------------------------------------------------------
INSERT INTO "SA".tmp_estaditica

------TMP_ESTADITICA 
SELECT *
FROM "SA".tmp_estaditica_1
    UNION
    SELECT *
    FROM "SA".tmp_estaditica_2
        UNION
        SELECT *
        FROM "SA".tmp_estaditica_3
            UNION
            SELECT *
            FROM "SA".tmp_estaditica_4
                UNION
                SELECT *
                FROM "SA".tmp_estaditica_5

;

------------------------------------------------------
----------------SA.ZONA_GEOGRAFICA------------------
------------------------------------------------------
INSERT INTO "SA".tmp_zona_geografica

------TMP_ZONA_GEOGRAFICA 
SELECT *
FROM "SA".tmp_zona_geografica_1
    UNION
    SELECT *
    FROM "SA".tmp_zona_geografica_2
        UNION
        SELECT *
        FROM "SA".tmp_zona_geografica_3
            UNION
            SELECT *
            FROM "SA".tmp_zona_geografica_4
                UNION
                SELECT *
                FROM "SA".tmp_zona_geografica_5

;
   
------------------------------------------------------
---------------SA.LIMPIEZA PARTICIONES----------------
------------------------------------------------------   
DELETE from "SA".tmp_establecimiento_1;
DELETE from "SA".tmp_estaditica_1;
DELETE from "SA".tmp_zona_geografica_1;

DELETE from "SA".tmp_establecimiento_2;
DELETE from "SA".tmp_estaditica_2;
DELETE from "SA".tmp_zona_geografica_2;

DELETE from "SA".tmp_establecimiento_3;
DELETE from "SA".tmp_estaditica_3;
DELETE from "SA".tmp_zona_geografica_3;

DELETE from "SA".tmp_establecimiento_4;
DELETE from "SA".tmp_estaditica_4;
DELETE from "SA".tmp_zona_geografica_4;

DELETE from "SA".tmp_establecimiento_5;
DELETE from "SA".tmp_estaditica_5;
DELETE from "SA".tmp_zona_geografica_5;

RETURN 'ok';

END;
$function$
;

------------------------------------------
----------------tablas SA-----------------
------------------------------------------
CREATE TABLE "SA".TMP_ZONA_GEOGRAFICA
(
  id_zona_geografica BIGINT
, cve_ent BIGINT
, entidad VARCHAR(200)
, cve_mun BIGINT
, municipio VARCHAR(200)
, cve_loc BIGINT
, localidad VARCHAR(200)
, latitud NUMERIC(21, 8)
, longitud NUMERIC(21, 8)
)
;

CREATE TABLE "SA".tmp_estaditica
(
  id_est BIGINT
, id_zona BIGINT
, id_anio INT
, per_ocu VARCHAR(20)
)
;

CREATE TABLE "SA".TMP_ESTABLECIMIENTO
(
  id_est BIGINT
, nom_estab VARCHAR(300)
, raz_social VARCHAR(300)
, codigo_act BIGINT
, nombre_act VARCHAR(300)
, tipounieco VARCHAR(8)
, fecha_alta VARCHAR(7)
)
;


CREATE TABLE "SA".TMP_ZONA_GEOGRAFICA_5(id_zona_geografica BIGINT, cve_ent BIGINT, entidad VARCHAR(200), cve_mun BIGINT, municipio VARCHAR(200), cve_loc BIGINT, localidad VARCHAR(200), latitud NUMERIC(21, 8), longitud NUMERIC(21, 8));
CREATE TABLE "SA".tmp_estaditica_5(id_est BIGINT, id_zona BIGINT, id_anio INT, per_ocu VARCHAR(20));
CREATE TABLE "SA".TMP_ESTABLECIMIENTO_5(id_est BIGINT, nom_estab VARCHAR(300), raz_social VARCHAR(300), codigo_act BIGINT, nombre_act VARCHAR(300), tipounieco VARCHAR(8), fecha_alta VARCHAR(7));
